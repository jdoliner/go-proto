// Code generated by protoc-gen-go.
// source: process/protoprocess.proto
// DO NOT EDIT!

package protoprocess

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "go.pedge.io/google-protobuf"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for API service

type APIClient interface {
	Do(ctx context.Context, opts ...grpc.CallOption) (API_DoClient, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Do(ctx context.Context, opts ...grpc.CallOption) (API_DoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[0], c.cc, "/protoprocess.API/Do", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIDoClient{stream}
	return x, nil
}

type API_DoClient interface {
	Send(*google_protobuf.BytesValue) error
	Recv() (*google_protobuf.BytesValue, error)
	grpc.ClientStream
}

type aPIDoClient struct {
	grpc.ClientStream
}

func (x *aPIDoClient) Send(m *google_protobuf.BytesValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIDoClient) Recv() (*google_protobuf.BytesValue, error) {
	m := new(google_protobuf.BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for API service

type APIServer interface {
	Do(API_DoServer) error
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Do_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).Do(&aPIDoServer{stream})
}

type API_DoServer interface {
	Send(*google_protobuf.BytesValue) error
	Recv() (*google_protobuf.BytesValue, error)
	grpc.ServerStream
}

type aPIDoServer struct {
	grpc.ServerStream
}

func (x *aPIDoServer) Send(m *google_protobuf.BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIDoServer) Recv() (*google_protobuf.BytesValue, error) {
	m := new(google_protobuf.BytesValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoprocess.API",
	HandlerType: (*APIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Do",
			Handler:       _API_Do_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
