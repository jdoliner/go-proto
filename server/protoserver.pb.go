// Code generated by protoc-gen-go.
// source: server/protoserver.proto
// DO NOT EDIT!

package protoserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "go.pedge.io/google-protobuf"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ServerStarted struct {
	Port        uint32 `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
	HttpPort    uint32 `protobuf:"varint,2,opt,name=http_port" json:"http_port,omitempty"`
	DebugPort   uint32 `protobuf:"varint,3,opt,name=debug_port" json:"debug_port,omitempty"`
	HttpAddress string `protobuf:"bytes,4,opt,name=http_address" json:"http_address,omitempty"`
}

func (m *ServerStarted) Reset()                    { *m = ServerStarted{} }
func (m *ServerStarted) String() string            { return proto.CompactTextString(m) }
func (*ServerStarted) ProtoMessage()               {}
func (*ServerStarted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ServerFinished struct {
	Error    string                    `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Duration *google_protobuf.Duration `protobuf:"bytes,2,opt,name=duration" json:"duration,omitempty"`
}

func (m *ServerFinished) Reset()                    { *m = ServerFinished{} }
func (m *ServerFinished) String() string            { return proto.CompactTextString(m) }
func (*ServerFinished) ProtoMessage()               {}
func (*ServerFinished) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServerFinished) GetDuration() *google_protobuf.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func init() {
	proto.RegisterType((*ServerStarted)(nil), "protoserver.ServerStarted")
	proto.RegisterType((*ServerFinished)(nil), "protoserver.ServerFinished")
}

var fileDescriptor0 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x8e, 0x41, 0x8b, 0x82, 0x50,
	0x14, 0x46, 0x71, 0xc6, 0x19, 0xc6, 0xab, 0x0e, 0xf4, 0x68, 0x61, 0x2d, 0x22, 0x5c, 0x05, 0xc1,
	0x13, 0xea, 0x2f, 0x44, 0xab, 0x76, 0xee, 0xda, 0x84, 0xf2, 0x5e, 0x2a, 0x84, 0x57, 0xee, 0xbb,
	0xf6, 0xfb, 0x93, 0xfb, 0x12, 0xda, 0x7d, 0x1c, 0x0e, 0x87, 0x0f, 0x32, 0x67, 0xe9, 0x69, 0xa9,
	0x18, 0x08, 0x19, 0xfd, 0xd6, 0xb2, 0x55, 0xfc, 0x81, 0xd6, 0x9b, 0x06, 0xb1, 0x79, 0x58, 0xaf,
	0xd5, 0xe3, 0xbd, 0x30, 0x23, 0x55, 0xdc, 0x61, 0xef, 0xe5, 0xfc, 0x0a, 0x69, 0x29, 0x66, 0xc9,
	0x15, 0xb1, 0x35, 0x2a, 0x81, 0x70, 0x40, 0xe2, 0x2c, 0xd8, 0x06, 0xbb, 0x54, 0x2d, 0x20, 0x6a,
	0x99, 0x87, 0x9b, 0xa0, 0x2f, 0x41, 0x0a, 0xc0, 0xd8, 0x7a, 0x6c, 0x3c, 0xfb, 0x16, 0xb6, 0x84,
	0x44, 0xb4, 0xca, 0x18, 0xb2, 0xce, 0x65, 0xe1, 0x44, 0xa3, 0xfc, 0x02, 0xff, 0xbe, 0x7d, 0xee,
	0xfa, 0xce, 0xb5, 0x53, 0x3c, 0x85, 0x1f, 0x4b, 0x84, 0x24, 0xf5, 0x48, 0xed, 0xe1, 0x6f, 0xbe,
	0x23, 0xf1, 0xf8, 0xb0, 0xd2, 0xfe, 0xaf, 0x9e, 0xff, 0xea, 0xd3, 0x5b, 0xa8, 0x7f, 0x05, 0x1d,
	0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x64, 0x66, 0x76, 0xf9, 0x00, 0x00, 0x00,
}
